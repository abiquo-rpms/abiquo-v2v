#!/bin/bash
# dependencies: vmware-vdiskimage, VBoxManage, qemu-img

FINISHED=0
E_UNSUPPORTED_FORMAT=1
E_VBOXMANAGE_NOT_FOUND=2
E_QEMUIMG_NOT_FOUND=3
E_INVALID_NUM_PARAMS=4
E_QEMU_FAILED=5
E_VBOX_FAILED=5


qemu_img="qemu-img"
vboxmanage="VBoxManage"

function checkRequirements
{
  if [ -z `which $vboxmanage` ]; then
    echo "[!] $vboxmanage binary not found" >&2
    exit  $E_VBOXMANAGE_NOT_FOUND
  fi
  if [ -z `which $qemu_img` ]; then
    echo "[!] $qemu_img binary not found" >&2
    echo "[+] QCOW2 convertions may fail"
  fi
}

function getCapabilities
{
    echo "VMDK_STREAM_OPTIMIZED"
    echo "VMDK_FLAT"
    echo "VMDK_SPARSE"
    echo "VHD"
    echo "RAW"
    echo "QCOW2"
    echo "VDI"
}

function checkFormat ()
{
    if [ "$1" == "VMDK_STREAM_OPTIMIZED" ];then
        return 0
    elif [ "$1" == "VMDK_FLAT" ];then
        return 0
    elif [ "$1" == "VMDK_SPARSE" ];then
        return 0
    elif [ "$1" == "VHD" ];then
        return 0
    elif [ "$1" == "RAW" ];then
        return 0
    elif [ "$1" == "QCOW2" ];then
        return 0
    elif [ "$1" == "VDI" ];then
        return 0
    else
        echo "[+] Format not supported"
        exit $E_UNSUPPORTED_FORMAT
    fi
}

function getVBoxString ()
{
    # 0 to five is the vmware-vdiskmanager numeration

    if [ "$1" == "VMDK_STREAM_OPTIMIZED" ];then
        echo "VMDK --variant Stream"
    elif [ "$1" == "VDI" ];then
        echo "VDI"
    elif [ "$1" == "VHD" ];then
        echo "VHD"
    elif [ "$1" == "VMDK_FLAT" ];then
        echo "RAW"
    elif [ "$1" == "VMDK_SPARSE" ];then
        echo "VMDK --variant Standard"
    elif [ "$1" == "RAW" ];then
        echo "RAW"
    else
        echo -1
        exit 2
    fi
}

function getQemuString ()
{
    if [ "$1" == "RAW" ];then
        echo raw
    elif [ "$1" == "VMDK_FLAT" ];then
        echo raw
    elif [ "$1" == "QCOW2" ];then
        echo qcow2
    elif [ "$1" == "VDI" ];then
        echo vdi
    elif [ "$1" == "VHD" ];then
        echo vpc
    elif [ "$1" == "QEMU_VMDK" ];then
        echo vmdk
    elif [ "$1" == "VMDK_SPARSE" ];then
        echo vmdk
    else
        echo -1
        exit 3
    fi
}

checkRequirements

if [ "$1" == "getCapabilities" ];then
    getCapabilities
    exit 0
fi
if [ $# -ne 4 ]
then
  echo "[+] Usage: `basename $0` input_format source_image_path output_format destination_image_path"
  exit $E_INVALID_NUM_PARAMS
fi

input_format=$1
output_format=$3
src_path=$2
dst_path=$4

checkFormat $input_format
checkFormat $output_format

if [ "$input_format" == "$output_format" ]; then
    `cp $src_path $dst_path`
    exit 0
fi

rm -f $dst_path #ensure destination file does not exist (apps library recovery)

while [ $FINISHED -eq 0 ]; do
    if [ $input_format == "QCOW2" ] || [ $input_format == "QEMU_VMDK" ] && [ $FINISHED -eq 0 ]; then
        output_format=$(getQemuString $3)
        if [ $output_format == "-1" ]; then
            output_format=$(getQemuString VMDK_SPARSE)
            tmpfile="$dst_path"
            dst_path="$tmpfile.tmp"
        else
            FINISHED=1
        fi
        `$qemu_img convert $src_path -O $output_format $dst_path &>/tmp/log`
        ERROR=$?
        if [ `echo "$file" | grep "\.tmp"` ]; then
            rm "$file"
        fi	

        if [ $ERROR != 0 ];then
            echo "[!] Error converting via qemu"
            echo "[+] $qemu_img convert $src_path -O $output_format $dst_path"
            exit $E_QEMU_FAILED
        fi
   
        input_format="VMDK_SPARSE"
        output_format=$3
        src_path="$dst_path"
        dst_path="$tmpfile"
    elif [ $input_format == "VMDK_STREAM_OPTIMIZED" ] || [ $input_format == "VDI" ] || [ $input_format == "VHD" ] || [ $input_format == "VMDK_SPARSE" ] || [ $input_format == "VMDK_SPARSE" ]  && [ $FINISHED -eq 0 ]; then
        output_format=$(getVBoxString $3)
        if [ "$output_format" == "-1" ]; then
            output_format=$(getVBoxString "VMWARE")
            tmpfile="$dst_path"
            dst_path="$tmpfile.tmp"
        else
            FINISHED=1
        fi

        `$vboxmanage clonehd --format $output_format $src_path  $dst_path &>/tmp/log`
        ERROR=$?
        if [ `echo "$file" | grep "\.tmp"` ]; then
            rm "$file"
        fi	

        if [ $ERROR != 0 ];then
            echo "[!] Error converting via VBoxManage"
            echo "$vboxmanage clonehd --format $output_format $src_path  $dst_path"
            exit $E_VBOX_FAILED
        fi
    
        input_format="QEMU_VMDK"
        output_format=$3
        src_path="$dst_path"
        dst_path="$tmpfile"
    elif [ $input_format == "RAW" ] || [ $input_format == "VMDK_FLAT" ] && [ $FINISHED -eq 0 ]; then
        output_format=$(getVBoxString $3)
        if [ "$output_format" == "-1" ] || [ "$3" == "VMDK_STREAM_OPTIMIZED" ]; then
            output_format=$(getVBoxString "VMDK_SPARSE")
            tmpfile="$dst_path"
            dst_path="$tmpfile.tmp"
        else
            FINISHED=1
        fi

        `$vboxmanage convertfromraw --format $output_format $src_path  $dst_path &>/tmp/log`
        ERROR=$?
        if [ `echo "$file" | grep "\.tmp"` ]; then
            rm "$file"
        fi	

        if [ $ERROR != 0 ];then
            echo "[!] Error converting via VBoxManage"
            echo "$vboxmanage convertfromraw --format $output_format $src_path  $dst_path"
            exit $E_VBOX_FAILED
        fi
    
        input_format="VMDK_SPARSE"
        output_format=$3
        src_path="$dst_path"
        dst_path="$tmpfile"
    fi
done
exit 0
